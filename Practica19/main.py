import sys
from antlr4 import *
from generated.CSVLexer import CSVLexer
from generated.CSVParser import CSVParser
from generated.CSVListener import CSVListener

# -----------------------------------------------------------------------------
# CLASES DE LA L√ìGICA DE NEGOCIO Y AN√ÅLISIS
# -----------------------------------------------------------------------------

# Esta clase representa nuestra Representaci√≥n Intermedia (RI) para una fila.
# Es una estructura de datos validada y con tipos correctos.
class ValidatedRow:
    def __init__(self, data):
        self.data = data
    def __repr__(self):
        return f"ValidatedRow(data={self.data})"

# El Listener original que realiza el an√°lisis sem√°ntico y genera la RI.
class Loader(CSVListener):
    def __init__(self):
        self.intermediate_representation = []
        self.header = []
        self.currentRowFieldValues = []

    # FASE 3: AN√ÅLISIS SEM√ÅNTico Y GENERACI√ìN DE RI
    def exitHeader(self, ctx:CSVParser.HeaderContext):
        self.header = list(self.currentRowFieldValues)
        self.currentRowFieldValues = []

    def enterRow(self, ctx:CSVParser.RowContext):
        self.currentRowFieldValues = []

    def exitRow(self, ctx:CSVParser.RowContext):
        if ctx.parentCtx.getRuleIndex() == CSVParser.RULE_header:
            return

        # ---- INICIO AN√ÅLISIS SEM√ÅNTICO ----
        if len(self.currentRowFieldValues) != len(self.header):
            line = ctx.start.line
            print(f"Error Sem√°ntico (L√≠nea {line}): La fila tiene {len(self.currentRowFieldValues)} columnas, se esperaban {len(self.header)}. Fila omitida.")
            return
        # ---- FIN AN√ÅLISIS SEM√ÅNTICO ----
        
        # ---- INICIO GENERACI√ìN DE RI ----
        row_dict = {}
        for i, val in enumerate(self.currentRowFieldValues):
            key = self.header[i]
            if isinstance(val, str):
                cleaned_val = val.strip()
                if key == "Cantidad":
                    cleaned_val = cleaned_val.replace('$', '').replace(',', '')
                row_dict[key] = cleaned_val
            else:
                row_dict[key] = val
        
        self.intermediate_representation.append(ValidatedRow(row_dict))
        # ---- FIN GENERACI√ìN DE RI ----

    def exitText(self, ctx:CSVParser.TextContext):
        self.currentRowFieldValues.append(ctx.getText())

    def exitString(self, ctx:CSVParser.StringContext):
        text = ctx.getText()[1:-1].replace('""', '"')
        self.currentRowFieldValues.append(text)

    def exitEmpty(self, ctx:CSVParser.EmptyContext):
        self.currentRowFieldValues.append("")

# -----------------------------------------------------------------------------
# CLASE DID√ÅCTICA PARA VISUALIZAR EL RECORRIDO
# -----------------------------------------------------------------------------

# üîä Este es el "Listener Locuaz" que imprime cada paso del recorrido.
class VerboseListener(CSVListener):
    def __init__(self):
        self.indentation_level = 0

    def _indent(self):
        return "  " * self.indentation_level

    def enterEveryRule(self, ctx):
        rule_name = type(ctx).__name__.replace('Context', '')
        print(f"{self._indent()}‚û°Ô∏è Entrando a: {rule_name}")
        self.indentation_level += 1

    def exitEveryRule(self, ctx):
        self.indentation_level -= 1
        rule_name = type(ctx).__name__.replace('Context', '')
        print(f"{self._indent()}‚¨ÖÔ∏è Saliendo de: {rule_name}")


# -----------------------------------------------------------------------------
# FUNCI√ìN PRINCIPAL
# -----------------------------------------------------------------------------

def main(argv):
    # FASE 1: AN√ÅLISIS L√âXICO
    input_stream = FileStream(argv[1], encoding='utf-8')
    lexer = CSVLexer(input_stream)
    stream = CommonTokenStream(lexer)
    
    # FASE 2: AN√ÅLISIS SINT√ÅCTICO
    parser = CSVParser(stream)
    tree = parser.csvFile()

    # --- Ejecuci√≥n del Listener Did√°ctico (VerboseListener) ---
    print("--- üö∂‚Äç‚ôÇÔ∏è Visualizaci√≥n del Recorrido del √Årbol ---")
    verbose_listener = VerboseListener()
    walker = ParseTreeWalker()
    walker.walk(verbose_listener, tree)
    
    print("\n" + "="*50 + "\n") # Separador visual

    # --- Ejecuci√≥n del Listener Original (Loader) ---
    print("--- ‚öôÔ∏è Resultado del An√°lisis y Generaci√≥n de RI ---")
    loader = Loader()
    walker.walk(loader, tree) # Se puede reutilizar el mismo walker

    # Imprimir errores sem√°nticos detectados por el Loader
    # (El Loader ya imprime los errores durante el recorrido)

    # Imprimir el resultado final
    print("--- Representaci√≥n Intermedia Generada ---")
    for row in loader.intermediate_representation:
        print(row)

if __name__ == '__main__':
    main(sys.argv)