# Generated from WhileLang.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,126,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,0,3,0,49,8,0,1,1,1,1,1,1,1,1,1,
        1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,
        9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,
        15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,5,19,110,8,19,10,
        19,12,19,113,9,19,1,20,4,20,116,8,20,11,20,12,20,117,1,21,4,21,121,
        8,21,11,21,12,21,122,1,21,1,21,0,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,130,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,1,48,1,0,0,0,3,50,1,0,0,0,5,56,1,0,0,0,7,59,1,0,0,0,9,64,
        1,0,0,0,11,70,1,0,0,0,13,79,1,0,0,0,15,81,1,0,0,0,17,83,1,0,0,0,
        19,85,1,0,0,0,21,87,1,0,0,0,23,89,1,0,0,0,25,91,1,0,0,0,27,93,1,
        0,0,0,29,95,1,0,0,0,31,98,1,0,0,0,33,101,1,0,0,0,35,103,1,0,0,0,
        37,105,1,0,0,0,39,107,1,0,0,0,41,115,1,0,0,0,43,120,1,0,0,0,45,49,
        3,33,16,0,46,49,3,35,17,0,47,49,3,37,18,0,48,45,1,0,0,0,48,46,1,
        0,0,0,48,47,1,0,0,0,49,2,1,0,0,0,50,51,5,119,0,0,51,52,5,104,0,0,
        52,53,5,105,0,0,53,54,5,108,0,0,54,55,5,101,0,0,55,4,1,0,0,0,56,
        57,5,105,0,0,57,58,5,102,0,0,58,6,1,0,0,0,59,60,5,101,0,0,60,61,
        5,108,0,0,61,62,5,115,0,0,62,63,5,101,0,0,63,8,1,0,0,0,64,65,5,98,
        0,0,65,66,5,114,0,0,66,67,5,101,0,0,67,68,5,97,0,0,68,69,5,107,0,
        0,69,10,1,0,0,0,70,71,5,99,0,0,71,72,5,111,0,0,72,73,5,110,0,0,73,
        74,5,116,0,0,74,75,5,105,0,0,75,76,5,110,0,0,76,77,5,117,0,0,77,
        78,5,101,0,0,78,12,1,0,0,0,79,80,5,40,0,0,80,14,1,0,0,0,81,82,5,
        41,0,0,82,16,1,0,0,0,83,84,5,123,0,0,84,18,1,0,0,0,85,86,5,125,0,
        0,86,20,1,0,0,0,87,88,5,59,0,0,88,22,1,0,0,0,89,90,5,61,0,0,90,24,
        1,0,0,0,91,92,5,62,0,0,92,26,1,0,0,0,93,94,5,60,0,0,94,28,1,0,0,
        0,95,96,5,61,0,0,96,97,5,61,0,0,97,30,1,0,0,0,98,99,5,33,0,0,99,
        100,5,61,0,0,100,32,1,0,0,0,101,102,5,45,0,0,102,34,1,0,0,0,103,
        104,5,42,0,0,104,36,1,0,0,0,105,106,5,47,0,0,106,38,1,0,0,0,107,
        111,7,0,0,0,108,110,7,1,0,0,109,108,1,0,0,0,110,113,1,0,0,0,111,
        109,1,0,0,0,111,112,1,0,0,0,112,40,1,0,0,0,113,111,1,0,0,0,114,116,
        7,2,0,0,115,114,1,0,0,0,116,117,1,0,0,0,117,115,1,0,0,0,117,118,
        1,0,0,0,118,42,1,0,0,0,119,121,7,3,0,0,120,119,1,0,0,0,121,122,1,
        0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,124,1,0,0,0,124,125,6,
        21,0,0,125,44,1,0,0,0,5,0,48,111,117,122,1,6,0,0
    ]

class WhileLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    OP = 1
    WHILE = 2
    IF = 3
    ELSE = 4
    BREAK = 5
    CONTINUE = 6
    LPAREN = 7
    RPAREN = 8
    LBRACE = 9
    RBRACE = 10
    SEMI = 11
    ASSIGN = 12
    GT = 13
    LT = 14
    EQ = 15
    NE = 16
    MINUS = 17
    MULT = 18
    DIV = 19
    ID = 20
    NUMBER = 21
    WS = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'while'", "'if'", "'else'", "'break'", "'continue'", "'('", 
            "')'", "'{'", "'}'", "';'", "'='", "'>'", "'<'", "'=='", "'!='", 
            "'-'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "OP", "WHILE", "IF", "ELSE", "BREAK", "CONTINUE", "LPAREN", 
            "RPAREN", "LBRACE", "RBRACE", "SEMI", "ASSIGN", "GT", "LT", 
            "EQ", "NE", "MINUS", "MULT", "DIV", "ID", "NUMBER", "WS" ]

    ruleNames = [ "OP", "WHILE", "IF", "ELSE", "BREAK", "CONTINUE", "LPAREN", 
                  "RPAREN", "LBRACE", "RBRACE", "SEMI", "ASSIGN", "GT", 
                  "LT", "EQ", "NE", "MINUS", "MULT", "DIV", "ID", "NUMBER", 
                  "WS" ]

    grammarFileName = "WhileLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


